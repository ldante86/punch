#!/usr/bin/ruby -w
# encoding: utf-8

# a bcd(6) clone: encode text to punched cards

module Bcd

  COLUMNS = 48

  SPACE, EDGE, HOLE, SIDE, SLASH = ' ', '_', ']', '|', '/'

  ROWCHARS = [ SPACE, SPACE, SPACE, 1, 2, 3, 4, 5, 6 ,7, 8, 9 ]

  HOLES = [
	"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
	"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
	"0", "0", "0", "0", "0", "518", "522", "66", "1090", "546", "2048",
	"1030", "2066", "1042", "1058", "2560", "578", "1024", "2114", "768",
	"512", "256", "128", "64", "32", "16", "8", "4", "2", "1", "18", "1034",
	"2058", "530", "10", "6", "34", "2304", "2176", "2112", "2080", "2064",
	"2056", "2052", "2050", "2049", "1280", "1152", "1088", "1056", "1040",
	"1032", "1028", "1026", "1025", "640", "576", "544", "528", "520",
	"516", "514", "513", "130", "2082", "1536", "642", "783", "2304",
	"2176", "2112", "2080", "2064", "2056", "2052", "2050", "2049", "1280",
	"1152", "1088", "1056", "1040", "1032", "1028", "1026", "1025", "640",
	"576", "544", "528", "520", "516", "514", "513", "130", "2054", "2082",
	"1536", "642", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
	"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
	"0", "0", "0", "0", "0", "0", "0", "0", "518", "522", "66", "1090",
	"546", "2048", "1030", "2066", "1042", "1058", "2560", "578", "1024",
	"2114", "768", "512", "256", "128", "64", "32", "16", "8", "4", "2",
	"1", "18", "1034", "2058", "530", "10", "6", "34", "2304", "2176",
	"2112", "2080", "2064", "2056", "2052", "2050", "2049", "1280", "1152",
	"1088", "1056", "1040", "1032", "1028", "1026", "1025", "640", "576",
	"544", "528", "520", "516", "514", "513", "130", "2054", "2082", "1536",
	"642", "783", "2304", "2176", "2112", "2080", "2064", "2056", "2052",
	"2050", "2049", "1280", "1152", "1088", "1056", "1040", "1032", "1028",
	"1026", "1025", "640", "576", "544", "528", "520", "516", "514", "513",
	"130", "2054", "2082", "1536", "642", "0" ]

  def self.bit(a, b);	a.to_i & (1 << b.to_i) end

  def self.print_card(str)
    str = str.upcase

    s = []
    for i in 0..str.length - 1; s << str[i] end
    s = s[0,COLUMNS]

    print SPACE
    print EDGE * COLUMNS
    printf("\n%s", SLASH)

    (0..s.length - 1).each do |f|
      HOLES[s[f].ord] ? print(s[f]) : print(SPACE)
    end

    while(i += 1) <= COLUMNS-1; print(SPACE) end
    puts SIDE

    (0..11).each do |row|
      print SIDE
      for t in 0..s.length - 1
        if ((bit(HOLES[s[t].ord], (11 - row))) != 0)
          print(HOLE)
        else
          print(ROWCHARS[row])
        end
      end
      while(t += 1) < COLUMNS; print ROWCHARS[row] end
      puts SIDE
    end

    print SIDE
    print EDGE * COLUMNS
    puts SIDE
  end

end # End of Bcd module

if ARGV.length == 0
  while str = gets
    str = str.strip
    str = Bcd::SPACE if str.length == 0
    Bcd::print_card(str)
  end
else
  Bcd::print_card(ARGV.join(Bcd::SPACE))
end
